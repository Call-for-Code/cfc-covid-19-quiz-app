{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","id","a","fetch","resp","json","data","App","useState","quiz","setQuiz","selectedAnswers","setSelectedAnswers","useEffect","fetchQuiz","then","handleAnswerSelected","useCallback","ev","console","log","target","name","value","oldData","Number","handleCheckAnswers","allCorrect","every","question","correct_answer_index","alert","className","alt","src","class","map","key","question_text","answers","answer","idx","checked","onChange","type","onClick","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,sMCI3C,WAAyBC,GAAzB,iBAAAC,EAAA,sEACqBC,MAAM,eAAD,OACPF,EADO,eAD1B,cACQG,EADR,gBAIqBA,EAAKC,OAJ1B,cAIQC,EAJR,yBAKSA,GALT,4C,sBAmEeC,MA3Df,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEiCF,mBAAS,IAF1C,mBAENG,EAFM,KAEWC,EAFX,KAGbC,qBAAU,Y,4CAERC,CADW,GACGC,KAAKL,KAClB,IACH,IAAMM,EAAuBC,uBAC3B,SAACC,GACCC,QAAQC,IAAIF,GADN,MAEkBA,EAAGG,OAAnBC,EAFF,EAEEA,KAAMC,EAFR,EAEQA,MACdX,GAAmB,SAACY,GAAD,sBAAmBA,EAAnB,eAA6BF,EAAOG,OAAOF,UAEhE,CAACX,IAEGc,EAAqBT,uBACzB,SAACC,GACCC,QAAQC,IAAIX,EAAME,GAClB,IAAMgB,EAAalB,EAAKmB,OAAM,SAACC,GAAD,OAAcA,EAASC,uBAAyBnB,EAAgBkB,EAAS5B,OACvG8B,MAAMJ,EAAa,WAAa,4BAElC,CAAClB,EAAME,IAIT,OADAQ,QAAQC,IAAIT,GAEV,yBAAKqB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAI,WAAWC,IAAI,qBAAqBC,MAAM,SACnD,gDACA,4BACG1B,EAAK2B,KAAI,SAACP,GAAD,OACR,yBAAKQ,IAAKR,EAAS5B,IACjB,4BAAK4B,EAASS,eACbT,EAASU,QAAQH,KAAI,SAACI,EAAQC,GAAT,OACpB,yBAAKJ,IAAKI,GACR,+BACE,2BACEC,QAAUD,IAAQ9B,EAAgBkB,EAAS5B,IAC3C0C,SAAU3B,EACV4B,KAAK,QACLrB,MAAOkB,EACPnB,KAAMO,EAAS5B,KAEhBuC,YAOb,4BAAQK,QAASnB,GAAjB,UACF,8CAAmB,uBAAGoB,KAAK,8CAAR,SAAnB,QAAsF,uBAAGA,KAAK,wBAAR,aACtF,oDAAyB,uBAAGA,KAAK,uEAAR,iBAAzB,OAA4H,uBAAGA,KAAK,uEAAR,4BAA5H,QCrDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAC6C,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.0ae055a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect, useCallback } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nasync function fetchQuiz(id) {\n  const resp = await fetch(\n    `/api/quizes/${id}/questions`\n  );\n  const data = await resp.json();\n  return data;\n}\n\nfunction App() {\n  const [quiz, setQuiz] = useState([]);\n  const [selectedAnswers, setSelectedAnswers] = useState({});\n  useEffect(() => {\n    const id = 1;\n    fetchQuiz(id).then(setQuiz);\n  }, []);\n  const handleAnswerSelected = useCallback(\n    (ev) => {\n      console.log(ev);\n      const { name, value } = ev.target;\n      setSelectedAnswers((oldData) => ({ ...oldData, [name]: Number(value)}));\n    },\n    [setSelectedAnswers]\n  );\n  const handleCheckAnswers = useCallback(\n    (ev) => {\n      console.log(quiz, selectedAnswers)\n      const allCorrect = quiz.every((question) => question.correct_answer_index === selectedAnswers[question.id])\n      alert(allCorrect ? 'You win!' : 'Something is incorrect')\n    },\n    [quiz, selectedAnswers]\n  );\n\n  console.log(selectedAnswers)\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img alt=\"IBM Logo\" src=\"ibm-logo-white.png\" class=\"logo\"/>\n        <h1> Simple Quiz App</h1>\n        <ul>\n          {quiz.map((question) => (\n            <div key={question.id}>\n              <h2>{question.question_text}</h2>\n              {question.answers.map((answer, idx) => (\n                <div key={idx}>\n                  <label>\n                    <input\n                      checked={ idx === selectedAnswers[question.id]} \n                      onChange={handleAnswerSelected}\n                      type=\"radio\"\n                      value={idx}\n                      name={question.id}\n                    />\n                    {answer}\n                  </label>\n                </div>\n              ))}\n            </div>\n          ))}\n        </ul>\n        <button onClick={handleCheckAnswers}>Submit</button>\n      <p>Go Further with <a href=\"https://reactjs.org/tutorial/tutorial.html\">React</a> and <a href=\"https://loopback.io/\">Loopback</a></p>\n      <p>Deploy your app using <a href=\"https://github.com/IBM/nodejs-express-app#ibm-cloud-developer-tools\">Cloud Foundry</a> or <a href=\"https://developer.ibm.com/patterns/app-modernization-s2i-openshift/\">Kubernetes and OpenShift</a>.</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}